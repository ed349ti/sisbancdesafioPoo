import textwrap
from datetime import datetime

# Classe base para Cliente
class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []  # Lista para armazenar as contas do cliente

    def realizar_transacao(self, conta, transacao):
        # Registra a transação na conta
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        # Adiciona uma conta à lista de contas do cliente
        self.contas.append(conta)

# Classe para Cliente do tipo Pessoa Física
class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

# Classe base para Conta
class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0  # Inicializa o saldo
        self._numero = numero
        self._agencia = "0001"  # Agência fixa
        self._cliente = cliente
        self._historico = Historico()  # Histórico de transações

    def sacar(self, valor):
        # Realiza um saque, se possível
        if valor > self._saldo:
            print("Operação falhou! Saldo insuficiente.")
            return False
        if valor > 0:
            self._saldo -= valor
            print("Saque realizado com sucesso!")
            return True
        print("Operação falhou! Valor inválido.")
        return False

    def depositar(self, valor):
        # Realiza um depósito
        if valor > 0:
            self._saldo += valor
            print("Depósito realizado com sucesso!")
            return True
        print("Operação falhou! Valor inválido.")
        return False

# Classe para Conta Corrente
class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self._limite = limite
        self._limite_saques = limite_saques

    def sacar(self, valor):
        # Checa limites antes de realizar o saque
        if valor > self._limite:
            print("Operação falhou! Valor do saque excede o limite.")
            return False
        if len(self._historico.transacoes) >= self._limite_saques:
            print("Operação falhou! Limite de saques excedido.")
            return False
        return super().sacar(valor)

    def __str__(self):
        return f"Agência: {self._agencia}, C/C: {self._numero}, Titular: {self._cliente.nome}"

# Classe para o histórico de transações
class Historico:
    def __init__(self):
        self._transacoes = []  # Inicializa a lista de transações

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        # Adiciona uma nova transação ao histórico
        self._transacoes.append({
            "tipo": transacao.__class__.__name__,
            "valor": transacao.valor,
            "data": datetime.now().strftime("%d-%m-%Y %H:%M:%S"),
        })

# Classe abstrata para Transação
class Transacao:
    @property
    def valor(self):
        pass

    def registrar(self, conta):
        pass

# Classe para Saque
class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        if conta.sacar(self.valor):
            conta.historico.adicionar_transacao(self)

# Classe para Depósito
class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        if conta.depositar(self.valor):
            conta.historico.adicionar_transacao(self)

# Função para exibir o menu
def menu():
    return input(textwrap.dedent("""\n
    ================ MENU ================
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usuário
    [q]\tSair
    => """))

# Funções para manipular clientes e contas
def filtrar_cliente(cpf, clientes):
    return next((cliente for cliente in clientes if cliente.cpf == cpf), None)

def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print("Cliente não possui conta!")
        return None
    return cliente.contas[0]  # Retorna a primeira conta

def depositar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)
    if not cliente:
        print("Cliente não encontrado!")
        return

    valor = float(input("Informe o valor do depósito: "))
    transacao = Deposito(valor)
    conta = recuperar_conta_cliente(cliente)
    if conta:
        cliente.realizar_transacao(conta, transacao)

def sacar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)
    if not cliente:
        print("Cliente não encontrado!")
        return

    valor = float(input("Informe o valor do saque: "))
    transacao = Saque(valor)
    conta = recuperar_conta_cliente(cliente)
    if conta:
        cliente.realizar_transacao(conta, transacao)

def exibir_extrato(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)
    if not cliente:
        print("Cliente não encontrado!")
        return

    conta = recuperar_conta_cliente(cliente)
    if conta:
        print("\n================ EXTRATO ================")
        for transacao in conta.historico.transacoes:
            print(f"{transacao['tipo']}: R$ {transacao['valor']:.2f} em {transacao['data']}")
        print(f"Saldo: R$ {conta._saldo:.2f}")

def criar_cliente(clientes):
    cpf = input("Informe o CPF: ")
    if filtrar_cliente(cpf, clientes):
        print("Já existe cliente com esse CPF!")
        return

    nome = input("Informe o nome: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço: ")
    cliente = PessoaFisica(nome, data_nascimento, cpf, endereco)
    clientes.append(cliente)
    print("Cliente criado com sucesso!")

def criar_conta(clientes, contas):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)
    if not cliente:
        print("Cliente não encontrado!")
        return

    numero_conta = len(contas) + 1
    conta = ContaCorrente(numero_conta, cliente)
    contas.append(conta)
    cliente.adicionar_conta(conta)
    print("Conta criada com sucesso!")

def listar_contas(contas):
    for conta in contas:
        print(conta)

# Função principal
def main():
    clientes = []
    contas = []

    while True:
        opcao = menu()
        if opcao == "d":
            depositar(clientes)
        elif opcao == "s":
            sacar(clientes)
        elif opcao == "e":
            exibir_extrato(clientes)
        elif opcao == "nu":
            criar_cliente(clientes)
        elif opcao == "nc":
            criar_conta(clientes, contas)
        elif opcao == "lc":
            listar_contas(contas)
        elif opcao == "q":
            break
        else:
            print("Operação inválida, selecione novamente.")

main()
